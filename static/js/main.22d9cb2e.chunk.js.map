{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["regex","bidis","matchLineNumber","m","line","i","index","input","bidiCode","text","texts","length","char","label","j","includes","newLine","split","k","splice","className","map","x","App","chunksRef","useRef","requestRef","useState","urls","setUrls","urlIndex","setUrlIndex","parsedCode","setParsedCode","useEffect","current","destroy","Math","max","min","a","axios","get","response","results","arr","exec","data","push","next","prev","useHotkeys","Navbar","color","light","expand","Container","NavbarBrand","href","Row","style","height","Col","md","Input","type","placeholder","onChange","e","target","value","lineNum","minHeight","wordWrap","rel","Button","float","marginLeft","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22d9cb2e.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { Navbar, NavbarBrand, Container, Row, Col, Input, Button } from 'reactstrap';\nimport axios from 'axios';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst regex = /(^[^\\n]*'[^\\n]*[\\u2066\\u2067\\u2068][^'\\u2069\\n]*'[^\\n]*$|^[^\\n]*'[^\\n]*[\\u202A\\u202B\\u202D\\u202E][^'\\u202C\\n]*'[^\\n]*$|^[^\\n]*\"[^\\n]*[\\u2066\\u2067\\u2068][^\"\\u2069\\n]*\"[^\\n]*$|^[^\\n]*\"[^\\n]*[\\u202A\\u202B\\u202D\\u202E][^\"\\u202C\\n]*\"[^\\n]*$|^[^\\n]*\\/\\*[^\\n]*[\\u2066\\u2067\\u2068][^\\u2069\\n]*\\*\\/[^\\n]*$|^[^\\n]*\\/\\*[^\\n]*[\\u202A\\u202B\\u202D\\u202E][^\\u202C\\n]*\\*\\/[^\\n]*$|^[^\\n]*\\/\\/[^\\n]*[\\u2066\\u2067\\u2068][^'\\u2069\\n]*$|^[^\\n]*\\/\\/[^\\n]*[\\u202A\\u202B\\u202D\\u202E][^'\\u202C\\n]*$|^[^\\n]*#[^\\n]*[\\u2066\\u2067\\u2068][^'\\u2069\\n]*$|^[^\\n]*#[^\\n]*[\\u202A\\u202B\\u202D\\u202E][^'\\u202C\\n]*$)/gm;\nconst bidis = [['\\u202C', 'PDF'],['\\u202A', 'LRE'], ['\\u202B', 'RLE'], ['\\u202D', 'LRO'], ['\\u202E', 'RLO'], ['\\u2069', 'PDI'], ['\\u2066', 'LRI'], ['\\u2067', 'RLI'], ['\\u2068', 'FSI'], ['\\u200E', 'LRM'], ['\\u061C', 'ALM']];\n\nfunction matchLineNumber(m) {\n  if (!m) {\n    return -1\n  }\n  let line = 1\n  for (let i = 0; i < m.index; i++) {\n    if (m.input[i] === '\\n') {\n      line++;\n    }\n  }\n  return line\n}\n\nfunction bidiCode(text) {\n  let texts = (typeof(text) === \"string\" ? [text] : text) ?? [];\n  for (var i=0; i<bidis.length; i++) {\n    const [char, label] = bidis[i];\n    for (var j=0; j<texts.length; j++) {\n      const line = texts[j];\n      if (typeof(line) === \"string\" && line.includes(char)) {\n        let newLine = line.split(char);\n        var k = 1;\n        while (k < newLine.length) {\n          newLine.splice(k, 0, <span className=\"bidi\">{label}</span>);\n          k += 2;\n        }\n        texts.splice(j, 1, ...newLine);\n        return bidiCode(texts);\n      }\n    }\n  }\n  return <>\n          {texts.map(x => typeof(x) === \"string\" ? <span>{x}</span> : x)}\n         </>;\n}\n\nfunction App() {\n  const chunksRef = useRef('');\n  const requestRef = useRef(null);\n  const [urls, setUrls] = useState([]);\n  const [urlIndex, setUrlIndex] = useState(0);\n  const [parsedCode, setParsedCode] = useState([]);\n  useEffect(() => {\n    if (requestRef.current !== null) {\n      requestRef.current.destroy();\n    }\n    setUrlIndex((index) => Math.max(Math.min(index, urls.length-1), 0));\n    if (urlIndex < urls.length) {\n      chunksRef.current = '';\n      setParsedCode([['', \"Loading...\"]]);\n      (async () => {\n        try {\n          const response = await axios.get(urls[urlIndex]);\n          let arr;\n          let results = [];\n          while ((arr = regex.exec(response.data)) !== null) {\n              results.push([matchLineNumber(arr), arr[0]]);\n          }\n          if (results.length) {\n            setParsedCode(results);\n          }\n          else if (urls.length) {\n            setParsedCode([['', \"No Bidi characters detected.\"]]);\n          }\n          else {\n            setParsedCode([['','']]);\n          }\n        } catch (ex) {\n          setParsedCode([['', \"An error ocurred loading the requested URL.\"],\n                         ['', ex.response.data]]);\n        }\n      })();\n    }\n    else {\n      setParsedCode([['','']]);\n    }\n  }, [urls, urlIndex, setParsedCode]);\n  const next = () => {\n    setUrlIndex(Math.min(urlIndex+1, urls.length-1));\n  };\n  const prev =  () => {\n    setUrlIndex(Math.max(urlIndex-1, 0));\n  }\n  useHotkeys('left', prev, {}, [urlIndex]);\n  useHotkeys('right', next, {}, [urlIndex, urls]);\n  return (\n    <div className=\"App\">\n      <Navbar color=\"light\" light expand=\"md\">\n        <Container>\n          <NavbarBrand href=\"/\">Bidi Viewer <small className=\"text-muted\">- a tool for bulk-analyzing raw online code for Trojan Source attacks</small></NavbarBrand>\n        </Container>\n      </Navbar>\n      <Container>\n        <Row className=\"mt-4\" style={{ height: '42vh' }}>\n          <Col md={4} className=\"h-100\">\n            <Input type=\"textarea\" placeholder=\"Enter newline-separated URLs pointing to code...\" onChange={e => setUrls(e.target.value ? e.target.value.split(\"\\n\") : [])} style={{ height: '100%' }} />\n          </Col>\n          <Col md={8} className=\"code-area h-100\">\n            <h6 className=\"text-muted pt-3\">Rendered Lines with Bidi Control Characters</h6>\n            <hr />\n            <code>\n              {parsedCode.map(([lineNum, line]) => {\n                if (lineNum === '') {\n                  return <><span className=\"lineNum\">{line}</span><br /></>\n                } else {\n                  return <><span className=\"lineNum\">{lineNum}: </span><span>{line}</span><br /></>;\n                }\n              })}\n            </code>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\" style={{ height: '42vh' }}>\n          <Col md={4} className=\"h-100\">\n            <div className=\"pt-4\">{urls.length ? `${urlIndex+1}/${urls.length}` : '0/0'}</div>\n            <div className=\"pt-4\" style={{ minHeight: '30vh', wordWrap: 'break-word' }}>{urls ? <a href={urls[urlIndex]} target=\"_blank\" rel=\"noreferrer\">{urls[urlIndex]}</a> : 'No source selected.'}</div>\n            <Button style={{ float: 'right', marginLeft: '10px' }} onClick={next} disabled={urlIndex >= urls.length-1}>&gt;</Button>\n            <Button style={{ float: 'right' }} onClick={prev} disabled={urlIndex <= 0}>&lt;</Button>\n          </Col>\n          <Col md={8} className=\"code-area h-100\">\n            <h6 className=\"text-muted pt-3\">Bidi Visualization</h6>\n            <hr />\n            <code>\n              {parsedCode.map(([lineNum, line]) => {\n                if (lineNum === '') {\n                  return <><span className=\"lineNum\">{line}</span><br /></>\n                }\n                else {\n                  return <><span className=\"lineNum\">{lineNum}: </span>{bidiCode(line)}<br /></>;\n                }\n              })}\n            </code>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}